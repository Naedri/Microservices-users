generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// https://www.sqlstyle.guide
// https://www.prisma.io/docs/concepts/components/prisma-client/working-with-prismaclient/use-custom-model-and-field-names#using-map-and-map-to-rename-fields-and-models-in-the-prisma-client-api
// model name -> PascalCas
// field name -> camelCase

// landingPage is acecssible by everyone logged users or not to discover what the application does
// secretJWT   is different for each application allowing backend of each app to authorize the user
// baseURL?appToken=tokenForTheUserBuiltWithTheSecretJWT
// description describe the purpose of the application, its structure is "language abbreviation (e.g. 'en')": "description translated in the associated language"
model Application {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar
  landingPage   String?        @db.VarChar
  description   Json?          @db.Json
  baseURL       String?        @db.VarChar
  secretJWT     String?        @db.VarChar
  subscriptions Subscription[]

  @@map("applications")
}

model Subscription {
  id           Int         @id @default(autoincrement())
  appId        Int         @map("app_id")
  userId       Int         @map("user_id")
  applications Application @relation(fields: [appId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("subscriptions")
}

// one role by user
// Prisma schema does not currently support default values for arrays
model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar
  password      String?        @db.VarChar
  firstName     String?        @map("first_name") @db.VarChar
  lastName      String?        @map("last_name") @db.VarChar
  role          Role           @default(CLIENT)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  subscriptions Subscription[]
  tokens        Token[]

  @@map("users")
}

enum Role {
  CLIENT
  ADMIN
}

model Token {
  id     String @id @default(uuid())
  userId Int    @map("user_id")
  User   User?  @relation(fields: [userId], references: [id])

  @@map("tokens")
}
